{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF3084"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Dataflow_sql_to_pool')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlTableHeader",
								"type": "DatasetReference"
							},
							"name": "Salesorderheader"
						},
						{
							"dataset": {
								"referenceName": "AzureSqlTableDetails",
								"type": "DatasetReference"
							},
							"name": "Salesorderdetails"
						},
						{
							"dataset": {
								"referenceName": "dimcustomer",
								"type": "DatasetReference"
							},
							"name": "sourceCustomer"
						},
						{
							"dataset": {
								"referenceName": "AzureProductdataset",
								"type": "DatasetReference"
							},
							"name": "sourceProduct"
						},
						{
							"dataset": {
								"referenceName": "AzureProductcategory",
								"type": "DatasetReference"
							},
							"name": "sourceproductcategory"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapsedimCustomer",
								"type": "DatasetReference"
							},
							"name": "MAXcustomersk"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "AzureSynapseAnalyticsTable2",
								"type": "DatasetReference"
							},
							"name": "Synapsepoolfacttable"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapsedimCustomer",
								"type": "DatasetReference"
							},
							"name": "sinkdimCustomer"
						},
						{
							"dataset": {
								"referenceName": "AzureSynapsedimproduct",
								"type": "DatasetReference"
							},
							"name": "sinkdimproduct"
						}
					],
					"transformations": [
						{
							"name": "joinSalesHeaderanddetail"
						},
						{
							"name": "selectcoloumn"
						},
						{
							"name": "selectcustomercolumn"
						},
						{
							"name": "joinproductandcategory"
						},
						{
							"name": "selectDimproduct"
						},
						{
							"name": "filtercolourNOTnullrows"
						},
						{
							"name": "derivedColumnTotaldue"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "surrogateKeycustomer"
						}
					],
					"scriptLines": [
						"source(output(",
						"          SalesOrderID as integer,",
						"          RevisionNumber as integer,",
						"          OrderDate as timestamp,",
						"          DueDate as timestamp,",
						"          ShipDate as timestamp,",
						"          Status as integer,",
						"          OnlineOrderFlag as boolean,",
						"          SalesOrderNumber as string,",
						"          PurchaseOrderNumber as string,",
						"          AccountNumber as string,",
						"          CustomerID as integer,",
						"          ShipToAddressID as integer,",
						"          BillToAddressID as integer,",
						"          ShipMethod as string,",
						"          CreditCardApprovalCode as string,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4),",
						"          Comment as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Salesorderheader",
						"source(output(",
						"          SalesOrderID as integer,",
						"          SalesOrderDetailID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(38,6),",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> Salesorderdetails",
						"source(output(",
						"          CustomerID as integer,",
						"          NameStyle as boolean,",
						"          Title as string,",
						"          FirstName as string,",
						"          MiddleName as string,",
						"          LastName as string,",
						"          Suffix as string,",
						"          CompanyName as string,",
						"          SalesPerson as string,",
						"          EmailAddress as string,",
						"          Phone as string,",
						"          PasswordHash as string,",
						"          PasswordSalt as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT * FROM SalesLT.Customer WHERE CustomerID<20000',",
						"     format: 'query') ~> sourceCustomer",
						"source(output(",
						"          ProductID as integer,",
						"          Name as string,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          StandardCost as decimal(19,4),",
						"          ListPrice as decimal(19,4),",
						"          Size as string,",
						"          Weight as decimal(8,2),",
						"          ProductCategoryID as integer,",
						"          ProductModelID as integer,",
						"          SellStartDate as timestamp,",
						"          SellEndDate as timestamp,",
						"          DiscontinuedDate as timestamp,",
						"          ThumbNailPhoto as binary,",
						"          ThumbnailPhotoFileName as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceProduct",
						"source(output(",
						"          ProductCategoryID as integer,",
						"          ParentProductCategoryID as integer,",
						"          Name as string,",
						"          rowguid as string,",
						"          ModifiedDate as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> sourceproductcategory",
						"source(output(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT MAX(CustomerSk) As \\'MAXCustomerSk\\'FROM dbo.dimCustomer;',",
						"     format: 'query',",
						"     staged: true) ~> MAXcustomersk",
						"Salesorderheader, Salesorderdetails join(Salesorderheader@SalesOrderID == Salesorderdetails@SalesOrderID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinSalesHeaderanddetail",
						"joinSalesHeaderanddetail select(mapColumn(",
						"          SalesOrderID = Salesorderheader@SalesOrderID,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          UnitPriceDiscount,",
						"          UnitPriceDiscount,",
						"          LineTotal,",
						"          OrderDate,",
						"          CustomerID,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcoloumn",
						"sourceCustomer select(mapColumn(",
						"          CustomerID,",
						"          CompanyName",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectcustomercolumn",
						"sourceProduct, sourceproductcategory join(sourceProduct@ProductCategoryID == sourceproductcategory@ProductCategoryID,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> joinproductandcategory",
						"joinproductandcategory select(mapColumn(",
						"          ProductID,",
						"          ProductNumber,",
						"          Color,",
						"          ProductCategoryID = sourceProduct@ProductCategoryID,",
						"          ProductCategoryName = sourceproductcategory@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> selectDimproduct",
						"selectDimproduct filter(!isNull(Color)) ~> filtercolourNOTnullrows",
						"selectcoloumn derive(TotalDuec = add(Freight,add(SubTotal,TaxAmt))) ~> derivedColumnTotaldue",
						"filtercolourNOTnullrows keyGenerate(output(ProductSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"selectcustomercolumn keyGenerate(output(CustomerSK as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKeycustomer",
						"derivedColumnTotaldue sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          SalesOrderID as integer,",
						"          OrderQty as integer,",
						"          ProductID as integer,",
						"          UnitPrice as decimal(19,4),",
						"          UnitPriceDiscount as decimal(19,4),",
						"          LineTotal as decimal(18,0),",
						"          OrderDate as timestamp,",
						"          CustomerID as integer,",
						"          SubTotal as decimal(19,4),",
						"          TaxAmt as decimal(19,4),",
						"          Freight as decimal(19,4),",
						"          TotalDue as decimal(19,4)",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          SalesOrderID,",
						"          OrderQty,",
						"          ProductID,",
						"          UnitPrice,",
						"          UnitPriceDiscount,",
						"          LineTotal,",
						"          OrderDate,",
						"          CustomerID,",
						"          SubTotal,",
						"          TaxAmt,",
						"          Freight,",
						"          TotalDue = TotalDuec",
						"     )) ~> Synapsepoolfacttable",
						"surrogateKeycustomer sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerSK as integer,",
						"          CustomerID as integer,",
						"          CompanyName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerSK,",
						"          CustomerID,",
						"          CompanyName",
						"     )) ~> sinkdimCustomer",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          ProductSK as integer,",
						"          ProductID as integer,",
						"          ProductNumber as string,",
						"          Color as string,",
						"          ProductCategoryID as integer,",
						"          ProductCategoryName as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     staged: true,",
						"     allowCopyCommand: true,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ProductID,",
						"          ProductNumber,",
						"          Color,",
						"          ProductCategoryID,",
						"          ProductCategoryName,",
						"          ProductSK",
						"     )) ~> sinkdimproduct"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflowCSVtoJSon')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Input_csvds",
								"type": "DatasetReference"
							},
							"name": "sourceCSV"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "csvtojsonsinkdataset",
								"type": "DatasetReference"
							},
							"name": "sinkJSON"
						}
					],
					"transformations": [],
					"scriptLines": [
						"source(output(",
						"          Correlationid as string,",
						"          Operationname as string,",
						"          Status as string,",
						"          Eventcategory as string,",
						"          Level as string,",
						"          Time as timestamp,",
						"          Subscription as string,",
						"          Eventinitiatedby as string,",
						"          Resourcetype as string,",
						"          Resourcegroup as string,",
						"          Resource as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> sourceCSV",
						"sourceCSV sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sinkJSON"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineDataFlow')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow sqltopool",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "Stored procedure cleartables",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Dataflow_sql_to_pool",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Salesorderheader": {},
									"Salesorderdetails": {},
									"sourceCustomer": {},
									"sourceProduct": {},
									"sourceproductcategory": {},
									"MAXcustomersk": {},
									"Synapsepoolfacttable": {},
									"sinkdimCustomer": {},
									"sinkdimproduct": {}
								}
							},
							"staging": {
								"linkedService": {
									"referenceName": "linkedServicestage",
									"type": "LinkedServiceReference"
								},
								"folderPath": "synapse"
							},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Stored procedure cleartables",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[ClearTables]"
						},
						"linkedServiceName": {
							"referenceName": "AzureSynapseAnalytics2",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Dataflow_sql_to_pool')]"
			]
		}
	]
}